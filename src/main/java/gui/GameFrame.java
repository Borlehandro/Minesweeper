package gui;

import api.ServerCommand;
import model.ExternalCell;
import model.Pair;
import score.ScoreItem;
import serialization.Serializer;
import server_api.ServerController;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.time.*;

public class GameFrame extends JFrame {

    private long gameTimeMillis;
    private Timer gameTimer;
    private ExternalCell[][] cells;
    private final ServerController serverController;

    private JPanel gamePanel;
    private JPanel fieldPanel;
    private JLabel timeLabel;
    private JLabel marksLabel;

    public GameFrame(int size, int mines) throws IOException {

        this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);

        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent ev) {
                try {
                    serverController.send(ServerCommand.CLOSE);
                    serverController.close();
                } catch (IOException exception) {
                    exception.printStackTrace();
                }

                dispose();
            }
        });


        ExternalCell.loadImages();
        $$$setupUI$$$();
        setVisible(true);

        serverController = new ServerController();

        ServerCommand createCommand = ServerCommand.NEW_GAME;
        createCommand.setArgs(String.valueOf(size), String.valueOf(mines));
        cells = Serializer.jsonToExternal(serverController.send(createCommand));
        startTimer(System.currentTimeMillis());
        setContentPane(gamePanel);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setSize((int) screenSize.getHeight(), (int) screenSize.getHeight());

        int MINIMUM_SIZE = (int) (((FieldPanel) fieldPanel).MINIMUM_CELL_SIZE * (1.1d * size + 0.1d));

        // System.err.println(MINIMUM_SIZE);

        setMinimumSize(new Dimension(MINIMUM_SIZE, MINIMUM_SIZE));

        ((FieldPanel) fieldPanel).CELL_SIZE = (int) (screenSize.getHeight() / (size + (size + 1) * 0.1d));
        ((FieldPanel) fieldPanel).SPACING = ((FieldPanel) fieldPanel).CELL_SIZE < 10 ?
                1 : (int) (((FieldPanel) fieldPanel).CELL_SIZE * 0.1d);
        ((FieldPanel) fieldPanel).FONT_SIZE = ((FieldPanel) fieldPanel).CELL_SIZE / 2;


        fieldPanel.addMouseMotionListener(new FieldMotionListener());
        fieldPanel.addMouseListener(new CellClickListener());
        this.addComponentListener(new ComponentAdapter() {
            public void componentResized(ComponentEvent componentEvent) {
                ((FieldPanel) fieldPanel).CELL_SIZE = (int) (Math.min(getSize().getHeight(), getSize().getWidth()) / (size + (size + 1) * 0.1d));
                ((FieldPanel) fieldPanel).SPACING = ((FieldPanel) fieldPanel).CELL_SIZE < 10 ?
                        1 : (int) (((FieldPanel) fieldPanel).CELL_SIZE * 0.1d);
                ((FieldPanel) fieldPanel).FONT_SIZE = ((FieldPanel) fieldPanel).CELL_SIZE / 2;

                // System.err.println("NEW SIZE : " + getSize().getHeight() + ";" + getSize().getWidth());
            }
        });
        Pair<Integer> marks = Serializer.jsonToPair(serverController.send(ServerCommand.GET_MARKS));
        marksLabel.setText(marks.x + "/" + marks.y);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        gamePanel = new JPanel();
        gamePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        timeLabel = new JLabel();
        timeLabel.setText("Time");
        gamePanel.add(timeLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gamePanel.add(fieldPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        marksLabel = new JLabel();
        marksLabel.setText("Marks");
        gamePanel.add(marksLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return gamePanel;
    }

    private void createUIComponents() {
        fieldPanel = new FieldPanel();
    }

    private class FieldPanel extends JPanel {

        int lastPositionX = 0;
        int lastPositionY = 0;

        int lastClickX = -1;
        int lastClickY = -1;

        int lastButtonClicked = MouseEvent.NOBUTTON;

        boolean success = true;
        boolean gameFinished = false;

        final int MINIMUM_CELL_SIZE = 10;
        int SPACING = 5;
        int CELL_SIZE = 50;
        int FONT_SIZE = 10;

        @Override
        protected void paintComponent(Graphics g) {

            loop:
            for (int i = 0; i < cells.length; i++)
                for (int j = 0; j < cells.length; j++) {

                    if (lastClickY >= i * CELL_SIZE + SPACING && lastClickY <= CELL_SIZE * (i + 1) - SPACING
                            && lastClickX >= j * CELL_SIZE + SPACING && lastClickX <= CELL_SIZE * (j + 1) - SPACING) {
                        try {

                            if (lastButtonClicked == MouseEvent.BUTTON1
                                    && success
                                    && (cells[i][j] == ExternalCell.UNKNOWN || cells[i][j] == ExternalCell.MARK)) {

                                if (cells[i][j] == ExternalCell.MARK) {
                                    changeFlagStatus(i, j);
                                } else {
                                    ServerCommand checkCommand = ServerCommand.CHECK;
                                    checkCommand.setArgs(String.valueOf(i), String.valueOf(j));
                                    cells = Serializer.jsonToExternal(serverController.send(checkCommand));
                                    if (cells.length == 0) {
                                        success = false;
                                        cells = Serializer.jsonToExternal(serverController.send(ServerCommand.SHOW_FIELD));
                                    }
                                }

                            } else if (lastButtonClicked == MouseEvent.BUTTON3) {
                                changeFlagStatus(i, j);
                            }

                            i = -1;
                            lastClickX = -1;
                            lastClickY = -1;
                            lastButtonClicked = MouseEvent.NOBUTTON;
                            continue loop;
                        } catch (IOException e) {
                            System.err.println(e.getMessage());
                        }
                    }

                    if (cells[i][j] == ExternalCell.UNKNOWN) {
                        if (lastPositionY >= i * CELL_SIZE + SPACING && lastPositionY <= CELL_SIZE * (i + 1) - SPACING
                                && lastPositionX >= j * CELL_SIZE + SPACING && lastPositionX <= CELL_SIZE * (j + 1) - SPACING)
                            g.setColor(Color.lightGray);
                        else g.setColor(Color.darkGray);
                    } else g.setColor(cells[i][j].getColor());

                    g.fillRoundRect(j * CELL_SIZE + SPACING, i * CELL_SIZE + SPACING,
                            CELL_SIZE - 2 * SPACING, CELL_SIZE - 2 * SPACING, 5, 5);

                    if (cells[i][j] != ExternalCell.UNKNOWN
                            && cells[i][j] != ExternalCell.MINE
                            && cells[i][j] != ExternalCell.MARK
                            && cells[i][j] != ExternalCell.WRONG_MARK) {
                        g.setColor(Color.black);

                        g.setFont(new Font("Comics", Font.PLAIN, FONT_SIZE));
                        g.drawString(Character.toString(cells[i][j].getSymbol()),
                                j * CELL_SIZE + SPACING + (CELL_SIZE - 2 * SPACING) / 2 - FONT_SIZE / 3,
                                i * CELL_SIZE + SPACING + (CELL_SIZE - 2 * SPACING) / 2 + FONT_SIZE / 3);

                    } else g.drawImage(cells[i][j].getImage(),
                            j * CELL_SIZE + SPACING, i * CELL_SIZE + SPACING,
                            CELL_SIZE - 2 * SPACING, CELL_SIZE - 2 * SPACING, (img, infoflags, x, y, width, height) -> false);
                }
            if (!gameFinished) {
                try {
                    if (Boolean.parseBoolean(serverController.send(ServerCommand.IS_COMPLETED)) && success) {
                        gameTimer.stop();
                        gameFinished = true;
                        onSuccess();
                    } else if (!success) {
                        gameTimer.stop();
                        gameFinished = true;
                        onFail();
                    }
                } catch (IOException e) {
                    System.err.println(e.getMessage());
                }
            }

        }

        private void changeFlagStatus(int i, int j) throws IOException {
            ServerCommand flagCommand = ServerCommand.FLAG;
            flagCommand.setArgs(String.valueOf(i), String.valueOf(j));
            cells = Serializer.jsonToExternal(serverController.send(flagCommand));
            Pair<Integer> marks = Serializer.jsonToPair(serverController.send(ServerCommand.GET_MARKS));
            marksLabel.setText(marks.x + "/" + marks.y);
        }
    }

    public class CellClickListener implements MouseListener {

        @Override
        public void mouseClicked(MouseEvent e) {

            ((FieldPanel) fieldPanel).lastClickX = e.getX();
            ((FieldPanel) fieldPanel).lastClickY = e.getY();

            ((FieldPanel) fieldPanel).lastButtonClicked = e.getButton();

            if (((FieldPanel) fieldPanel).success && !((FieldPanel) fieldPanel).gameFinished) {
                gamePanel.repaint();
            }
        }

        @Override
        public void mousePressed(MouseEvent e) {

        }

        @Override
        public void mouseReleased(MouseEvent e) {

        }

        @Override
        public void mouseEntered(MouseEvent e) {

        }

        @Override
        public void mouseExited(MouseEvent e) {

        }
    }

    public class FieldMotionListener implements MouseMotionListener {

        @Override
        public void mouseDragged(MouseEvent e) {
            // Nothing
        }

        @Override
        public void mouseMoved(MouseEvent e) {
//            System.out.println("Mouse at\n"
//                    + "x : " + e.getX()
//                    + "y : " + e.getY());

            ((FieldPanel) (fieldPanel)).lastPositionX = e.getX();
            ((FieldPanel) (fieldPanel)).lastPositionY = e.getY();
            try {
                if (((FieldPanel) fieldPanel).success && !Boolean.parseBoolean(serverController.send(ServerCommand.IS_COMPLETED))) {
                    gamePanel.repaint();
                }
            } catch (IOException exception) {
                System.err.println(exception.getMessage());
            }
        }

    }

    private void startTimer(long startTimeMillis) {
        gameTimer = new Timer(0, e -> {
            LocalTime time = LocalTime.ofInstant(Instant.ofEpochMilli(System.currentTimeMillis() - startTimeMillis), ZoneOffset.UTC);
            timeLabel.setText(ScoreItem.timeFormatter.format(time));
            gameTimeMillis = System.currentTimeMillis() - startTimeMillis;
        });
        gameTimer.start();
    }

    private void onSuccess() {
        this.setResizable(false);
        new SaveScoreDialog(this, LocalTime.ofInstant(Instant.ofEpochMilli(gameTimeMillis), ZoneOffset.UTC), serverController);
    }

    private void onFail() {
        this.setResizable(false);
        new TryAgainDialog(this);
    }
}
