package gui;

import model.Field;
import model.Pair;
import score.ScoreItem;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneOffset;

public class GameFrame extends JFrame {

    private final long start;
    private final Field field;

    private JPanel gamePanel;
    private JPanel fieldPanel;
    private JLabel timeLabel;

    public GameFrame(int size, int mines) {
        $$$setupUI$$$();
        this.setVisible(true);
        field = new Field(size, mines);
        start = System.currentTimeMillis();
        startTimer();
        this.setContentPane(gamePanel);
        fieldPanel.addMouseMotionListener(new FieldMotionListener());
        fieldPanel.addMouseListener(new CellClickListener());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        gamePanel = new JPanel();
        gamePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        timeLabel = new JLabel();
        timeLabel.setText("Time");
        gamePanel.add(timeLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gamePanel.add(fieldPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return gamePanel;
    }

    private void createUIComponents() {
        fieldPanel = new FieldPanel();
    }

    private class FieldPanel extends JPanel {

        int lastPositionX = 0;
        int lastPositionY = 0;

        int lastClickX = -1;
        int lastClickY = -2;


        private static final int SPACING = 5;
        private static final int CELL_SIZE = 20;

        @Override
        protected void paintComponent(Graphics g) {
            char[][] cells = field.getField();
            System.err.println("REPAINT!");

            // Debug
            for (int i = 0; i < cells.length; i++) {
                for (int j = 0; j < cells.length; j++) {
                    System.out.print(cells[i][j] + " ");
                }
                System.out.println();
            }

            System.err.println("LastClick : " + lastClickX + " ; " + lastClickY);

//            for (int i = 0; i < cells.length; i++)
//                for (int j = 0; j < cells.length; j++) {
//
//                }

            loop:
            for (int i = 0; i < cells.length; i++)
                for (int j = 0; j < cells.length; j++) {

                    if (lastClickY >= i * CELL_SIZE + SPACING && lastClickY <= CELL_SIZE * (i + 1) - SPACING
                            && lastClickX >= j * CELL_SIZE + SPACING && lastClickX <= CELL_SIZE * (j + 1) - SPACING) {
                        System.err.println("Click on : " + i + " " + j);
                        if (field.check(i, j)) {
                            i = -1;
                            lastClickX = -1;
                            lastClickY = -1;
                            continue loop;
                        } else setVisible(false);
                    }

                    g.setColor(switch (cells[i][j]) {
                        case '?' -> {
                            if (lastPositionY >= i * CELL_SIZE + SPACING && lastPositionY <= CELL_SIZE * (i + 1) - SPACING
                                    && lastPositionX >= j * CELL_SIZE + SPACING && lastPositionX <= CELL_SIZE * (j + 1) - SPACING) {
                                yield Color.red;
                            } else yield Color.darkGray;
                        }
                        case '0' -> Color.GREEN;
                        case '1' -> Color.yellow;
                        case '2' -> Color.cyan;
                        case '3' -> Color.blue;
                        case '4' -> Color.ORANGE;
                        case '5' -> Color.magenta;
                        case '*' -> Color.black;
                        default -> Color.darkGray;
                    });

                    g.fillRect(j * CELL_SIZE + SPACING, i * CELL_SIZE + SPACING,
                            CELL_SIZE - 2 * SPACING, CELL_SIZE - 2 * SPACING);

                }
        }
    }

    public class CellClickListener implements MouseListener {

        @Override
        public void mouseClicked(MouseEvent e) {
            System.err.println("Clicked : " + e.getX() + ";" + e.getY());

            ((FieldPanel) fieldPanel).lastClickX = e.getX();
            ((FieldPanel) fieldPanel).lastClickY = e.getY();

            gamePanel.repaint();
        }

        @Override
        public void mousePressed(MouseEvent e) {

        }

        @Override
        public void mouseReleased(MouseEvent e) {

        }

        @Override
        public void mouseEntered(MouseEvent e) {

        }

        @Override
        public void mouseExited(MouseEvent e) {

        }
    }

    public class FieldMotionListener implements MouseMotionListener {

        @Override
        public void mouseDragged(MouseEvent e) {
            // Nothing
        }

        @Override
        public void mouseMoved(MouseEvent e) {
            System.out.println("Mouse at\n"
                    + "x : " + e.getX()
                    + "y : " + e.getY());

            ((FieldPanel) (fieldPanel)).lastPositionX = e.getX();
            ((FieldPanel) (fieldPanel)).lastPositionY = e.getY();

            gamePanel.repaint();
        }
    }

    private void startTimer() {
        Timer timer = new Timer(0, e -> {
            LocalTime time = LocalTime.ofInstant(Instant.ofEpochMilli(System.currentTimeMillis() - start), ZoneOffset.UTC);
            timeLabel.setText(ScoreItem.timeFormatter.format(time));
        });
        timer.start();
    }

    @Override
    public void paintComponents(Graphics g) {
        timeLabel.setText(String.valueOf(System.currentTimeMillis()));
    }

}
